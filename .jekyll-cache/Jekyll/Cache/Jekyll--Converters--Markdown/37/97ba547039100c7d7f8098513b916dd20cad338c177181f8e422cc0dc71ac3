I"û!<p>As a teaching assistant for a handful of cybersecurity classes at Iowa State,
I‚Äôve had the opportunity to create content that is used in labs and projects.
One of the best parts of the job is devising malicious machines and nefarious
networks that the students have to break into or secure, and I decided to do
something new for part of the final project this semester: give them a box to secure
where the shell they‚Äôre interacting with is constantly harassing them. I love my
job.</p>

<p>To be more precise, the <em>default</em> shell they‚Äôre interacting with is very
difficult and obstinate, and that‚Äôs about it. Other than that, it‚Äôs a fairly 
standard Ubuntu 16.04 headless server. This is a 200-level course, populated 
mostly by sophomores who have only taken one prior unix-heavy class, so I‚Äôm not 
going to throw anything particularly difficult at them. Frankly, all of the 
harassment that the shell throws at them is just to draw their attention to 
the fact that something is different and they should probably go change their 
login shell.</p>

<p>One last warning I need to make clear: I am not a great programmer. I know just
enough C to be a danger to myself, so I advise against running this code
anywhere important. It works for me (albeit poorly), and I can‚Äôt recommend
reading it if you don‚Äôt want to be shocked and offended at my abuse of the
beautiful language that is C. Alright, that said, let‚Äôs jump into Trosh.</p>

<p><img src="/images/trosh/trosh_login.png" alt="Logging in to Trosh" />
<code class="highlighter-rouge">[root@AppleWatch √ü@$Œª]$</code></p>

<p>This is what you‚Äôre
presented with when you log in and are presented with a Trosh shell. The prompt
is slightly unorthodox, having nothing at all to do with the actual user you‚Äôre
logged in as.
I thought it was a little funny to include the ‚Äú√ü@$Œª‚Äù prompt as a play on a
‚ÄúBash‚Äù prompt.</p>

<p>As a general rule, most commands will function as you would expect, though I
don‚Äôt have any real color support, tab completion, or history to up-arrow back
through. I didn‚Äôt include the ability to easily <code class="highlighter-rouge">echo $ENVIRONMENT_VARIABLE</code>. 
I also don‚Äôt have pipes, output redirection, <code class="highlighter-rouge">&amp;&amp;</code> or <code class="highlighter-rouge">||</code> to chain
commands together, or any standard quality of life tool included in any modern
shell. It runs commands (sometimes) and that‚Äôs it.</p>

<p><img src="/images/trosh/basic_dirs.png" alt="Basic Directory Traversal" />
As you can see, basic directory traversal is no problem, though the lack of tab
completion quickly becomes annoying. How about we try and do something more
interesting, such as creating, editing, and then viewing a file?
<img src="/images/trosh/vim1.png" alt="Touch + Vim" />
<img src="/images/trosh/vim2.png" alt="Editing With Vim" />
<img src="/images/trosh/vim3.png" alt="Cat the File" /></p>

<p>Well, that all went by pretty smoothly. However, this post isn‚Äôt supposed to be
about how great my custom shell is (it isn‚Äôt even remotely good). No, this is a
post about the <del>fun</del> <del>mean</del> fun things it does when people in class try to do
other basic stuff. Of course, it handles all of the following cases (poorly)
using some terminal built-in commands that it catches, and everything else just
gets passed along to an <code class="highlighter-rouge">execvp()</code> system call. This post isn‚Äôt going to get
into the weeds of how the shell works (though I will write that up at some point
in the future). Instead, I‚Äôm going to focus on the rude, unhelpful, and
generally annoying behaviors I intentionally programmed into the shell. We‚Äôll
start by cleaning up the terminal with <code class="highlighter-rouge">clear</code>.
<img src="/images/trosh/preClear.png" alt="Before Clearing" />
<img src="/images/trosh/postClear.png" alt="After Clearing" />
Boom, your shell is now filled with garbage. It is still possible, however, to
just hammer ‚Äúenter‚Äù until the screen is clean-ish. 
(It‚Äôs worth pointing out that I considered doing something rude when
enter is pressed on an empty line, such as logging the user out. However, that
felt like a little much for our students.)</p>

<p>Alright, let‚Äôs say our user is now curious why the shell is acting weird, so
they decide to launch a new shell that they know is installed and functional,
such as <code class="highlighter-rouge">bash</code> or even <code class="highlighter-rouge">sh</code>.
<img src="/images/trosh/BashAndSh.png" alt="Bash and Sh" />
Ouch, that might cause some annoyance. Now, because I‚Äôm a nice person, I decided
to leave one really simple workaround: I‚Äôm only filtering for the commands
<code class="highlighter-rouge">bash</code> and <code class="highlighter-rouge">sh</code>, I‚Äôm not checking the binary that the user wants to run. Calling
<code class="highlighter-rouge">/bin/bash</code> with the absolute path to the executable will still launch a much
more functional shell. (For the purposes of the assignment Trosh was written
for, it‚Äôs expected that students with either discover this or just edit their
login shell in /etc/passwd. I even changed the Trosh binary name to
<code class="highlighter-rouge">REALLY_DANGEROUS_SHELL</code> so they should definitely notice something is up.)
<img src="/images/trosh/BashWorkaround.png" alt="Bash Workaround" /></p>

<p>Next up, two pretty standard commands: <code class="highlighter-rouge">whoami</code> and <code class="highlighter-rouge">uname -a</code>. At this point,
the user should have figured out that this box is acting very strangely, so they
will hopefully start hunting for useful information. Well, they may be a little
disappointed with the reward their curiousity earns.
<img src="/images/trosh/whoami.png" alt="whoami" />
<img src="/images/trosh/arch.png" alt="BTW I Use Arch" />
<a href="https://github.com/KittyKatt/screenFetch">Major shoutout to Screenfetch, from which I shamelessly stole that ASCII art
for a personal favorite meme</a>.
Remember that this is being deployed on Ubuntu boxes, so that should cause a
little confusion. Also, this is literally the only time that Trosh will print
anything in color.</p>

<p>Finally, we come upon my favorite feature. If you know me, you know that I‚Äôm
<em>that guy</em> who gets way too into evangelizing Vim. Naturally, it should come as
no surprise to you that Vim works beautifully when called from my shell.
However, what if we try to use another editor that I don‚Äôt like?</p>

<p><img src="/images/trosh/nano.png" alt="Nano (Nobody likes nano)" /></p>

<p><code class="highlighter-rouge">Okay, look. I won't stop you from using nano, but you should try vim.</code>
<code class="highlighter-rouge">People say it's intimidating, but it's actually quite simple.</code>
<code class="highlighter-rouge">It's very streamlined and efficient, and the plugins are amazing.</code>
<code class="highlighter-rouge">However, you asked for nano, and you'll get it.</code>
<code class="highlighter-rouge">But first, we're waiting 20 seconds so you can think about using vim.</code></p>

<p>Look, I know this isn‚Äôt a good way to win the hearts and minds of users. I know
that stuff like this makes the Vim community come across as elitist and
unfriendly. But you know what, this shell isn‚Äôt meant to win hearts and minds,
it‚Äôs meant to bother users. And frankly I think it does a decent job.</p>

<p>There‚Äôs also a fun little gimmick if someone tries to run emacs.
<img src="/images/trosh/emacs.png" alt="Emacs" /></p>

<p>Oh, and just to end the post, here‚Äôs a fun little thing I discovered on accident
after deploying the shell to the machine for class. It turns out that I forgot
to do any kind of signal handling, so when it catches a SIGINT (Ctrl-C) meant to
kill a running process, the whole thing just kind of dies. If it‚Äôs being run as
the login shell, the user is kicked back to the login screen, and if it‚Äôs being
run in a terminal emulator, the terminal window will instantly disappear. That
might be a little bit annoying to deal with.</p>

<p>Well, that about wraps things up for Trosh as it stands today. I‚Äôll probably
keep maintaining it and adding more and more malicious things for use in future
classes and the like. If you feel like deploying this to some users you don‚Äôt
particularly like (and you don‚Äôt mind reading some awful C code) then feel free
to check out <a href="https://github.com/hackpotter/trosh">my github repo with the source
code.</a> Thanks for reading!</p>

<p>-JP</p>
:ET